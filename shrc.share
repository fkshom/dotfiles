## Path
## ====================

[ -d ~/.local/bin ] && export PATH=~/.local/bin:$PATH

[ -d /usr/local/go/bin ] && export PATH=/usr/local/go/bin:$PATH

[ -d ~/go/bin ] && export PATH=~/go/bin:$PATH

## Local Program Environment
## ====================

if [ -s $HOME/.rbenv/bin/rbenv -o -d $HOME/.rbenv ]; then
  echo "load rbenv"
  export PATH="$HOME/.rbenv/bin:$PATH"
  eval "$(rbenv init -)"
  [[ `readlink /proc/$$/exe` == *bash ]] && [ -s ~/.rbenv/completions/rbenv.bash ] && \
    echo "load rbenv.bash" && \
    source ~/.rbenv/completions/rbenv.bash 2> /dev/null
# for zsh completion is broken
#  [[ `readlink /proc/$$/exe` == *zsh ]] && [ -s ~/.rbenv/completions/rbenv.zsh ] && \
#    echo "load rbenv.zsh" && \
#    source ~/.rbenv/completions/rbenv.zsh 2> /dev/null
fi

if which ruby >/dev/null && which gem >/dev/null; then
    PATH="$(ruby -r rubygems -e 'puts Gem.user_dir')/bin:$PATH"
fi


if [ -d $HOME/.pyenv ]; then
  echo "load pyenv"
  export PYENV_ROOT="$HOME/.pyenv"
  export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init --path)"
  eval "$(pyenv init -)"
fi

if [ -d $HOME/.poetry/bin ]; then
  echo "load poetry"
  export PATH="$HOME/.poetry/bin:$PATH"
fi

if [ -d $HOME/.perl-extlib ]; then
  export PERL_CPANM_OPT="--local-lib=$HOME/.perl-extlib"
  export PERL5LIB="$HOME/.perl-extlib/lib/perl5:$PERL5LIB"
fi

if [ -d $HOME/.nvm ]; then
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
  [[ `readlink /proc/$$/exe` == *bash ]] && \
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
fi

## alias
## ==================================

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias df='df -h'
alias du='du -h'
alias more='less -R'
alias grep='grep -i --color=auto'
alias fgrep='fgrep -i --color=auto'
alias egrep='egrep -i --color=auto'
alias ls='ls -hF --color=auto --show-control-chars --group-directories-first'
alias ll='ls -l'
alias la='ls -A'     # all but . and ..
alias lla='ll -A'
alias dir='ls --color=auto --format=vertical'
alias vdir='ls --color=auto --format=long'
alias sl=''
alias echo='echo -e'
alias sc='systemctl'
alias scr='systemctl restart'
alias scs='systemctl status'
alias po='poetry'
alias prp='poetry run python3'
alias ..='cd ..'
alias to64='cat - | bzip2 | base64 -w 180'
alias from64='cat - | base64 -d | bunzip2'
alias t='tig'
alias ta='tig --all'
alias tigall='tig --all'
alias g='git'
compdef g=git

alias fig='docker-compose'
compdef fig=docker-compose

if type xsel >/dev/null 2>&1; then
  alias pbcopy='xsel --clipboard --input'
  alias pbpaste='xsel --clipboard --output'
fi

if type colordiff >/dev/null 2>&1; then
  alias cdiff='colordiff'
fi

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'


if type bundle >/dev/null 2>&1; then
  alias bi='bundle install'
  alias be='bundle exec'
  alias ber='bundle exec ruby'
  alias rspec='rspec -cfd'
fi

if [ -e "/Applications/MacVim.app/Contents/MacOS/Vim" ]; then
  alias vi='env LANG=ja_JP.UTF-8 /Applications/MacVim.app/Contents/MacOS/Vim "$@"'
  alias vim='vi'
  alias view='vim -R'
  alias gvim='env LANG=ja_JP.UTF-8 /Applications/MacVim.app/Contents/MacOS/Vim -g "$@"'
fi

if [ -e "/Applications/Emacs.app/Contents/MacOS/Emacs" ]; then
  alias emacs='open -a Emacs "$@"'
fi

if type poetry >/dev/null 2>&1; then
  alias pr='poetry run'
  alias pi='poetry install'
  alias prp='poetry run python'
fi

if type peco >/dev/null 2>&1; then
  alias gl='cd $(ghq root)/$(ghq list | peco)'
fi

if [[ `readlink /proc/$$/exe` == *bash ]]; then
  alias reload=". ~/.bashrc; echo reloaded ~/.bashrc"
fi
if [[ `readlink /proc/$$/exe` == *zsh ]]; then
  alias reload=". ~/.zshrc; echo reloaded ~/.zshrc"
fi
alias htb='sudo openvpn $HOME/.vpn/startingpoint.ovpn'

mkcd(){
  mkdir -p $1
  cd $1
} 
mapshare(){
  if type vmware-hgfsclient > /dev/null 2>&1; then
    vmware-hgfsclient | while read folder; do
      echo "[i] Mounting ${folder}   (/mnt/hgfs/${folder})"
      mkdir -p "/mnt/hgfs/${folder}"
      umount -f "/mnt/hgfs/${folder}" 2>/dev/null
      vmhgfs-fuse -o allow_other -o auto_unmount ".host:/${folder}" "/mnt/hgfs/${folder}"
    done
  else
    echo "vmware-hgfsclient does not installed"
  fi
}

## environment variable
## ====================

export EDITOR=vim
export VISUAL=vim
export PAGER=less

[ $TERM = "eterm-color" ] && TERM=xterm-color
[ $TERM = "xterm" ] && TERM=xterm-256color

## other
## ====================

# ビープ音を消す
if [ -x "`which xset`" ] && [ -n "$DISPLAY" ]; then xset b off; fi

# C-sでSTOPするのをやめる
tty -s && stty stop undef
# C-qでSTARTするのをやめる
tty -s && stty start undef

